@require: gr
@require: color
@import: puzzle

module Slither : sig
  direct \slither : [int; int; (inline-text list) list; ((puzzle-line-pos list) list) list] inline-cmd

end = struct

  let cell-w = 8mm
  let cell-h = 8mm

  let r = 1pt
  let c = Color.black

  let draw-point-h = PuzzleCellDesign.dots-h r c


  let draw-point-v = PuzzleCellDesign.dots-v r c


let make-board w h d lst1 lst2 lst3 =
  let frame-lst = Puzzle.make-frame-list lst1 in
  let lattice-lst = Puzzle.make-lattice-list lst1 in
  let frame-graphics-lst =
    Puzzle.make-frame-graphics cell-w cell-h draw-point-h draw-point-v frame-lst
  in
  let lattice-graphics-lst =
    Puzzle.make-lattice-graphics cell-w cell-h draw-point-h draw-point-v lattice-lst
  in
  let cell-lst = Puzzle.make-cell-graphics cell-w cell-h lst2 in
  let main-list = List.append frame-graphics-lst lattice-graphics-lst in
    Puzzle.draw-board w h d main-list cell-lst


let-inline ctx \slither x y it-lst-lst line =
  let w = cell-w *' (float x) in
  let h = cell-h *' (float y) in
  let d = 0mm in
  let cell-lst = Puzzle.make-rectangle-board x y in
  let strokef path =
    let t = 0.5pt in
    let c = Color.black in
      stroke t c path
  in
  let q-board =
    let to-ib it =
      read-inline ctx it
    in
    let to-puzzle i =
      let ib = to-ib i in
        [(1, Object (0.5, 0.5, ib))]
    in
    let ib-lst-lst =
      List.map (List.map to-puzzle) it-lst-lst
    in
    let line-lst =
      let to-puzzle lst =
        let to-puzzle-sub line =
          match line with
          | Top    -> [(2, Line(strokef, (0., 1.), (0, 0, 1., 1.)))]
          | Bottom -> [(2, Line(strokef, (0., 0.), (0, 0, 1., 0.)))]
          | Left   -> [(2, Line(strokef, (0., 1.), (0, 0, 0., 0.)))]
          | Right  -> [(2, Line(strokef, (1., 1.), (0, 0, 1., 0.)))]
        in
          List.map to-puzzle-sub lst |> List.concat
      in
        List.map (List.map to-puzzle) line
    in
    let main-lst-lst =
      Puzzle.combine ib-lst-lst cell-lst |> Puzzle.combine line-lst
    in
      Puzzle.puzzle-sieve-on-board 0 2 main-lst-lst
  in
    make-board w h d cell-lst q-board []

end
