@require: list
@require: gr
@require: color


type puzzle-line-pos =
  | Top
  | Bottom
  | Left
  | Right

type puzzle-contents =
  | Object of float * float * inline-boxes
  | Line   of (path -> graphics) * (float * float) * (int * int * float * float)
  | Other  of length -> length -> int -> int -> graphics

type puzzle =
  | InSidePuzzle of (int * puzzle-contents) list
  | OutSidePuzzle of (int * puzzle-contents) list
  | NullPuzzle

module Puzzle : sig

  type 'a board

  val to-list-list : 'a board -> ('a list) list
  val to-board : ('a list) list -> 'a board

  val add-cell : (int * int) -> (int * puzzle-contents) list -> puzzle board -> puzzle board
  val h2v : puzzle board -> puzzle board
  val add-frame-line : int -> puzzle list -> (int * int) list
  val add-lattice-line : int -> puzzle list -> (int * int) list
  val make-line-list : (int -> puzzle list -> (int * int) list) -> puzzle board -> ((int * int) board * (int * int) board)
  val make-frame-list : puzzle board -> ((int * int) board * (int * int) board)
  val make-lattice-list : puzzle board -> ((int * int) board * (int * int) board)
  val make-board : (int * int) list -> puzzle board
  val make-rectangle-board : int -> int -> puzzle board
  val coordinate-list-list : 'a board -> (int * int * 'a) board

  val make-frame-graphics : length -> length -> (length -> length -> (int * int) -> graphics list) -> (length -> length -> (int * int) -> graphics list) -> ((int * int) board * (int * int) board) -> graphics list
  val make-lattice-graphics : length -> length -> (length -> length -> (int * int) -> graphics list) -> (length -> length -> (int * int) -> graphics list) -> ((int * int) board * (int * int) board) -> graphics list


  val combine : (((int * puzzle-contents) list) list) list -> puzzle board -> puzzle board

  val puzzle-sieve : int -> int -> puzzle -> puzzle list
  val puzzle-sieve-on-board : int -> int -> puzzle board -> (puzzle list) board
  val draw-puzzle : length -> length -> int -> int -> puzzle-contents -> graphics
  val make-cell-graphics : length -> length -> (puzzle list) board -> graphics list


  val draw-board : length -> length -> length -> graphics list -> graphics list -> inline-boxes

end = struct

type 'a board = ('a list) list

let to-list-list b = b
let to-board ll = ll

let abs n =
  if n < 0 then
    n * (-1)
  else
    n


let add-cell (x, y) puzzle-content lst =
  let-rec sub f n lst =
    if n <= 0 then
      match lst with
      | [] -> []
      | x :: xs -> (f x) :: xs
    else
      match lst with
      | [] -> []
      | x :: xs -> x :: sub f (n - 1) xs
  in
  let f puzzle =
    match puzzle with
    | NullPuzzle -> NullPuzzle
    | InSidePuzzle(lst) -> InSidePuzzle(List.append puzzle-content lst)
    | OutSidePuzzle(lst) -> OutSidePuzzle(List.append puzzle-content lst)
  in
    sub (fun lst -> sub f x lst) y lst



let-rec take i lst =
  match lst with
  | []      -> []
  | x :: xs -> (
      if i < 0 then
        []
      else
        x :: (take (i - 1) xs)
  )


let-rec takewhile f lst =
  match lst with
  | []      -> []
  | x :: xs -> (
      if f x then
        x :: takewhile f xs
      else
        takewhile f xs
  )

let head lst =
  match lst with
  | []        -> None
  | head :: _ -> Some(head)


let tail lst =
  match lst with
  | []        -> None
  | _ :: tail -> Some(tail)


let-rec max f lst =
  match lst with
  | []           -> None
  | x :: []      -> Some(x)
  | x :: y :: zs -> (
    if (f x y) < 0 then
      max f (y :: zs)
    else
      max f (x :: zs)
  )


let comparison-num n m =
  if n < m then
      -1
    else
      if n > m then
        1
      else
        0


let-rec repeat n initial =
  if n == 0 then
    []
  else
    initial :: repeat (n - 1) initial


let h2v puzzle-list-list =
  let get-size-option n-op =
    match n-op with
    | None    -> 0
    | Some(n) -> n
  in
  let get-puzzle p-op =
    match p-op with
    | None -> NullPuzzle
    | Some(p) -> p
  in
  let get-puzzle-lst lst-op =
    match lst-op with
    | None -> []
    | Some(l) -> l
  in
  let list-size =
    List.map List.length puzzle-list-list |> max comparison-num |> get-size-option
  in
  let-rec h2v-sub lst n =
    if n == 0 then
      lst
    else
      List.map (fun lst -> head lst |> get-puzzle) lst :: h2v-sub (
          List.map (fun lst -> tail lst |> get-puzzle-lst) lst
        ) (n - 1)
  in
    h2v-sub puzzle-list-list list-size |> take (list-size - 1)



let add-frame-line n puzzle-lst =
  let-rec add-line-sub n m lst =
    match lst with
    | [] -> []
    | (NullPuzzle) :: [] -> []
    | (OutSidePuzzle(p)) :: [] -> []
    | (InSidePuzzle(p)) :: [] -> (m, n) :: []
    | (NullPuzzle) :: (InSidePuzzle(p2)) :: xs -> (m, n) :: add-line-sub n (m + 1) (InSidePuzzle(p2) :: xs)
    | (OutSidePuzzle(p)) :: (InSidePuzzle(p2)) :: xs -> (m, n) :: add-line-sub n (m + 1) (InSidePuzzle(p2) :: xs)
    | (InSidePuzzle(p1)) :: (NullPuzzle) :: xs -> (m, n) :: add-line-sub n (m + 1) (NullPuzzle :: xs)
    | (InSidePuzzle(p1)) :: (OutSidePuzzle(p2)) :: xs -> (m, n) :: add-line-sub n (m + 1) (OutSidePuzzle(p2) :: xs)
    | _ :: xs -> add-line-sub n (m + 1) xs
  in
    add-line-sub n 0 puzzle-lst



let add-lattice-line n puzzle-lst =
  let-rec add-line-sub n m lst =
    match lst with
    | [] -> []
    | (NullPuzzle) :: [] -> []
    | (OutSidePuzzle(p)) :: [] -> []
    | (InSidePuzzle(p)) :: [] -> []
    | (InSidePuzzle(p1)) :: (InSidePuzzle(p2)) :: xss -> (m, n) :: add-line-sub n (m + 1) (InSidePuzzle(p2) :: xss)
    | _ :: xs -> add-line-sub n (m + 1) xs
  in
    add-line-sub n 0 puzzle-lst


let make-line-list f lst =
  let add-null lst =
    (NullPuzzle) :: lst
  in
  let y-size = List.length lst in
  let-mutable puzzle-c <- y-size + 1 in
  let numbering x =
    let () = puzzle-c <- !puzzle-c - 1 in
    let n = !puzzle-c in
      (n, x)
  in
  let () = puzzle-c <- y-size + 1 in
  let h-frame-list =
    let main-list =
      List.map add-null lst |> List.map numbering
    in
      List.map (fun (n, lst) -> f n lst) main-list
  in
  let () = puzzle-c <- y-size + 1 in
  let correction (y1, x1) =
    let y2 = y-size - y1 in
    let x2 = y-size - x1 in
      (x2, y2)
  in
  let v-frame-list =
    let v-list = h2v lst in
    let main-list =
      List.map add-null v-list |> List.map numbering
    in
      List.map (fun (n, lst) -> f n lst) main-list |> List.map (List.map correction)
  in
    (h-frame-list, v-frame-list)




let make-frame-list lst = make-line-list add-frame-line lst


let make-lattice-list lst = make-line-list add-lattice-line lst


let make-board lst =
  let make-board-sub (n, m) =
    List.append (repeat n NullPuzzle) (repeat m (InSidePuzzle[]))
  in
    List.map make-board-sub lst


let make-rectangle-board x y =
  repeat y (repeat x (InSidePuzzle[]))


%(puzzle list) list を((int * int * puzzle) list) listに変換

let coordinate-list-list puzzle-list-list =
  let y-size =
    List.length puzzle-list-list
  in
  let-mutable x-num <- 0 in
  let-mutable y-num <- y-size + 1 in
  let numbering-x lst =
    let numbering-x-sub p =
      let () = x-num <- !x-num + 1 in
      let x = !x-num in
        (x, p)
    in
    let () = x-num <- 0 in
      List.map numbering-x-sub lst
  in
  let numbering-y lst =
    let () = y-num <- !y-num - 1 in
    let y = !y-num in
    let numbering-y-sub (x, p) =
      let main = (x, y, p) in
        main
    in
      List.map numbering-y-sub lst
  in
  let x-list =
    List.map numbering-x puzzle-list-list
  in
  let x-y-list =
    List.map numbering-y x-list
  in
    x-y-list





let make-frame-graphics w h make-graphics1 make-graphics2 (hlst, vlst) =
  let f1 lst = List.map (List.map (make-graphics1 w h )) lst |> List.concat |> List.concat in
  let f2 lst = List.map (List.map (make-graphics2 w h )) lst |> List.concat |> List.concat in
  let main-hlst = f1 hlst in
  let main-vlst = f2 vlst in
    List.append main-hlst main-vlst


let make-lattice-graphics w h make-graphics1 make-graphics2 (hlst, vlst) =
  let f1 lst = List.map (List.map (make-graphics1 w h)) lst |> List.concat |> List.concat in
  let f2 lst = List.map (List.map (make-graphics2 w h)) lst |> List.concat |> List.concat in
  let main-hlst = f1 hlst in
  let main-vlst = f2 vlst in
    List.append main-hlst main-vlst



let combine lst1 lst2 =
  let combine-sub-sub contents puzzle =
    match puzzle with
    | NullPuzzle -> NullPuzzle
    | InSidePuzzle(lst) -> InSidePuzzle(List.append contents lst)
    | OutSidePuzzle(lst) -> OutSidePuzzle(List.append contents lst)
  in
  let-rec combine-sub lst1 lst2 =
    match (lst1, lst2) with
    | ([], []) -> []
    | (x1 :: xs1, x2 :: xs2) -> (x1, x2) :: combine-sub xs1 xs2
    | (x1 :: xs1, []) -> []
    | ([], x2 :: xs2) -> ([], x2) :: combine-sub [] xs2
  in
  let tuple-list =
    List.map (fun (lst1, lst2) -> combine-sub lst1 lst2) (combine-sub lst1 lst2)
  in
  let main-list =
    List.map (List.map (fun (c, p) -> combine-sub-sub c p)) tuple-list
  in
    main-list


% n が最低値 m が最高値 l は現在値
let puzzle-sieve n m puzzle =
  let-rec sieve l lst =
    if l > m then
      []
    else
      takewhile (fun (n, p) -> n == l) lst :: sieve (l + 1) lst
  in
  let to-puzzle-inside lst =
    InSidePuzzle(lst)
  in
  let to-puzzle-outside lst =
    OutSidePuzzle(lst)
  in
    match puzzle with
    | NullPuzzle -> repeat (abs(m) + abs(n)) NullPuzzle
    | InSidePuzzle(lst) -> sieve n lst |> List.map to-puzzle-inside
    | OutSidePuzzle(lst) -> sieve n lst |> List.map to-puzzle-outside


let puzzle-sieve-on-board n m lst-lst =
  List.map (List.map (puzzle-sieve n m)) lst-lst


let correction-draw-text (x, y) ib =
  let (w, h, d) = get-natural-metrics ib in
  let x-c = x -' (w *' 0.5) in
  let y-c =
    y -' (h +' d) *' 0.5
  in
    draw-text (x-c, y-c) ib


% type puzzle-contents =
%   | Object of float * float * inline-boxes
%   | Line   of (float * float) * (int * int * float * float)
%   | Other  of length -> length -> int -> int -> graphics
let draw-puzzle cell-w cell-h x y content =
  let w-p fl = cell-w *' (float (x - 1) +. fl) in
  let h-p fl = cell-w *' (float (y - 1) +. fl) in
  let draw-line f po1 po2 =
    let path = Gr.line po1 po2 in
      f path
  in
  match content with
  | Object (x1, y1, ib) -> correction-draw-text (w-p x1, h-p y1) ib
  | Line (f, (x1, y1), (x-p, y-p, x2, y2)) -> draw-line f (w-p x1, h-p y1) (cell-w *' (float (x - 1 + x-p) +. x2), cell-h *' (float (y - 1 + y-p) +. y2))
  | Other (f) -> f cell-w cell-h x y



let make-cell-graphics cell-w cell-h lst =
  let coordinate-list = coordinate-list-list lst in
  let draw-cell-puzzle cell-w cell-h x y puzzle =
    let draw-cell-puzzle-sub (_, p) =
      draw-puzzle cell-w cell-h x y p
    in
      match puzzle with
      | NullPuzzle -> []
      | InSidePuzzle(lst) -> List.map draw-cell-puzzle-sub lst
      | OutSidePuzzle(lst) -> List.map draw-cell-puzzle-sub lst
  in
  let main-lst =
    List.map (List.map (fun (x, y, lst) -> List.map (draw-cell-puzzle cell-w cell-h x y) lst)) coordinate-list
  in
    main-lst |> List.concat |> List.concat |> List.concat


let draw-board w h d lst1 lst2 =
  let f (x, y) gr = shift-graphics (x, y) gr in
  let lst = List.append lst1 lst2 in
  let main-list (x, y) = List.map (f (x, y)) lst in
    inline-graphics w h d main-list

end


module PuzzleCellDesign :sig

  val empty : length -> length -> (int * int) -> graphics list
  val dots-h : length -> color -> length -> length -> (int * int) -> graphics list
  val dots-v : length -> color -> length -> length -> (int * int) -> graphics list
  val stroke-line-h : length -> color -> length -> length -> (int * int) -> graphics list
  val stroke-line-v : length -> color -> length -> length -> (int * int) -> graphics list
  val dashed-line-h : length -> (length * length * length) -> color -> length -> length -> (int * int) -> graphics list
  val dashed-line-v : length -> (length * length * length) -> color -> length -> length -> (int * int) -> graphics list

end = struct


  let empty _ _ _ = []


  let dots-h r c w h (x, y) =
    let path =
      [
        Gr.circle (w *' (float x), h *' (float (y - 1))) r;
        Gr.circle (w *' (float x), h *' (float y)) r;
      ]
    in
    let gr-lst = List.map (fill c) path in
      gr-lst


  let dots-v r c w h (x, y) =
      let path =
      [
        Gr.circle (w *' (float (x + 1)), h *' (float y)) r;
        Gr.circle (w *' (float x), h *' (float y)) r;
      ]
    in
    let gr-lst = List.map (fill c) path in
      gr-lst


  let stroke-line-h t c w h (x, y) =
    let fx1 = float x in
    let fy1 = float y in
    let fx2 = float x in
    let fy2 = float (y - 1) in
    let p = Gr.line (w *' fx1, h *' fy1) (w *' fx2, h *' fy2) in
      [stroke t c p]


  let stroke-line-v t c w h (x, y) =
    let fx1 = float x in
    let fy1 = float y in
    let fx2 = float (x + 1) in
    let fy2 = float y in
    let p = Gr.line (w *' fx1, h *' fy1) (w *' fx2, h *' fy2) in
      [stroke t c p]


  let dashed-line-h t (len1, len2, len3) c w h (x, y) =
    let fx1 = float x in
    let fy1 = float y in
    let fx2 = float x in
    let fy2 = float (y - 1) in
    let p = Gr.line (w *' fx1, h *' fy1) (w *' fx2, h *' fy2) in
      [dashed-stroke t (len1, len2, len3) c p]


  let dashed-line-v t (len1, len2, len3) c w h (x, y) =
    let fx1 = float x in
    let fy1 = float y in
    let fx2 = float (x + 1) in
    let fy2 = float y in
    let p = Gr.line (w *' fx1, h *' fy1) (w *' fx2, h *' fy2) in
      [dashed-stroke t (len1, len2, len3) c p]
end
